@software{Di_Tommaso_Nextflow_enables_reproducible_2017,
author = {Di Tommaso, Paolo and Chatzou, Maria and Floden, Evan and Prieto Barja, Pablo and Palumbo, Emilio and Notredame, Cedric},
doi = {10.1038/nbt.3820},
month = apr,
title = {{Nextflow enables reproducible computational workflows}},
url = {https://nextflow.io},
version = {1.0.0},
year = {2017}
}

@article{10.1093/bioinformatics/btr174,
    author = {Barnett, Derek W. and Garrison, Erik K. and Quinlan, Aaron R. and Strömberg, Michael P. and Marth, Gabor T.},
    title = "{BamTools: a C++ API and toolkit for analyzing and managing BAM files}",
    journal = {Bioinformatics},
    volume = {27},
    number = {12},
    pages = {1691-1692},
    year = {2011},
    month = {04},
    abstract = "{Motivation: Analysis of genomic sequencing data requires efficient, easy-to-use access to alignment results and flexible data management tools (e.g. filtering, merging, sorting, etc.). However, the enormous amount of data produced by current sequencing technologies is typically stored in compressed, binary formats that are not easily handled by the text-based parsers commonly used in bioinformatics research.Results: We introduce a software suite for programmers and end users that facilitates research analysis and data management using BAM files. BamTools provides both the first C++ API publicly available for BAM file support as well as a command-line toolkit.Availability: BamTools was written in C++, and is supported on Linux, Mac OSX and MS Windows. Source code and documentation are freely available at http://github.org/pezmaster31/bamtools.Contact:  barnetde@bc.edu}",
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/btr174},
    url = {https://doi.org/10.1093/bioinformatics/btr174},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/27/12/1691/48861708/bioinformatics\_27\_12\_1691.pdf},
}

@article{10.1093/bioinformatics/btt656,
    author = {Liao, Yang and Smyth, Gordon K. and Shi, Wei},
    title = "{featureCounts: an efficient general purpose program for assigning sequence reads to genomic features}",
    journal = {Bioinformatics},
    volume = {30},
    number = {7},
    pages = {923-930},
    year = {2013},
    month = {11},
    abstract = "{Motivation: Next-generation sequencing technologies generate millions of short sequence reads, which are usually aligned to a reference genome. In many applications, the key information required for downstream analysis is the number of reads mapping to each genomic feature, for example to each exon or each gene. The process of counting reads is called read summarization. Read summarization is required for a great variety of genomic analyses but has so far received relatively little attention in the literature.Results: We present featureCounts, a read summarization program suitable for counting reads generated from either RNA or genomic DNA sequencing experiments. featureCounts implements highly efficient chromosome hashing and feature blocking techniques. It is considerably faster than existing methods (by an order of magnitude for gene-level summarization) and requires far less computer memory. It works with either single or paired-end reads and provides a wide range of options appropriate for different sequencing applications.Availability and implementation:   featureCounts is available under GNU General Public License as part of the Subread (http://subread.sourceforge.net) or Rsubread (http://www.bioconductor.org) software packages.Contact:   shi@wehi.edu.au}",
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/btt656},
    url = {https://doi.org/10.1093/bioinformatics/btt656},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/30/7/923/48921621/bioinformatics\_30\_7\_923.pdf},
}

@article{10.1093/bioinformatics/bty560,
    author = {Chen, Shifu and Zhou, Yanqing and Chen, Yaru and Gu, Jia},
    title = "{fastp: an ultra-fast all-in-one FASTQ preprocessor}",
    journal = {Bioinformatics},
    volume = {34},
    number = {17},
    pages = {i884-i890},
    year = {2018},
    month = {09},
    abstract = "{Quality control and preprocessing of FASTQ files are essential to providing clean data for downstream analysis. Traditionally, a different tool is used for each operation, such as quality control, adapter trimming and quality filtering. These tools are often insufficiently fast as most are developed using high-level programming languages (e.g. Python and Java) and provide limited multi-threading support. Reading and loading data multiple times also renders preprocessing slow and I/O inefficient.We developed fastp as an ultra-fast FASTQ preprocessor with useful quality control and data-filtering features. It can perform quality control, adapter trimming, quality filtering, per-read quality pruning and many other operations with a single scan of the FASTQ data. This tool is developed in C++ and has multi-threading support. Based on our evaluation, fastp is 2–5 times faster than other FASTQ preprocessing tools such as Trimmomatic or Cutadapt despite performing far more operations than similar tools.The open-source code and corresponding instructions are available at https://github.com/OpenGene/fastp.}",
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/bty560},
    url = {https://doi.org/10.1093/bioinformatics/bty560},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/34/17/i884/50582648/bioinformatics\_34\_17\_i884.pdf},
}

@article{10.1093/bioinformatics/bts635,
    author = {Dobin, Alexander and Davis, Carrie A. and Schlesinger, Felix and Drenkow, Jorg and Zaleski, Chris and Jha, Sonali and Batut, Philippe and Chaisson, Mark and Gingeras, Thomas R.},
    title = "{STAR: ultrafast universal RNA-seq aligner}",
    journal = {Bioinformatics},
    volume = {29},
    number = {1},
    pages = {15-21},
    year = {2012},
    month = {10},
    abstract = "{Motivation: Accurate alignment of high-throughput RNA-seq data is a challenging and yet unsolved problem because of the non-contiguous transcript structure, relatively short read lengths and constantly increasing throughput of the sequencing technologies. Currently available RNA-seq aligners suffer from high mapping error rates, low mapping speed, read length limitation and mapping biases.Results: To align our large (\\&gt;80 billon reads) ENCODE Transcriptome RNA-seq dataset, we developed the Spliced Transcripts Alignment to a Reference (STAR) software based on a previously undescribed RNA-seq alignment algorithm that uses sequential maximum mappable seed search in uncompressed suffix arrays followed by seed clustering and stitching procedure. STAR outperforms other aligners by a factor of \\&gt;50 in mapping speed, aligning to the human genome 550 million 2 × 76 bp paired-end reads per hour on a modest 12-core server, while at the same time improving alignment sensitivity and precision. In addition to unbiased de novo detection of canonical junctions, STAR can discover non-canonical splices and chimeric (fusion) transcripts, and is also capable of mapping full-length RNA sequences. Using Roche 454 sequencing of reverse transcription polymerase chain reaction amplicons, we experimentally validated 1960 novel intergenic splice junctions with an 80–90\\% success rate, corroborating the high precision of the STAR mapping strategy.Availability and implementation: STAR is implemented as a standalone C++ code. STAR is free open source software distributed under GPLv3 license and can be downloaded from http://code.google.com/p/rna-star/.Contact:  dobin@cshl.edu.}",
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/bts635},
    url = {https://doi.org/10.1093/bioinformatics/bts635},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/29/1/15/49060422/bioinformatics\_29\_1\_15.pdf},
}

@article{Ewels_MultiQC_summarize_analysis_2016,
author = {Ewels, Philip and Magnusson, Måns and Lundin, Sverker and Käller, Max},
doi = {10.1093/bioinformatics/btw354},
journal = {Bioinformatics},
number = {1},
pages = {3047},
title = {{MultiQC: summarize analysis results for multiple tools and samples in a single report}},
url = {http://dx.doi.org/10.1093/bioinformatics/btw354},
volume = {32},
year = {2016}
}