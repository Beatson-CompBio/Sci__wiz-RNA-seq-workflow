#!/usr/bin/env python
"""
Created on 2024-01-22 14:47:39
Module desc: sci wizard CLI application module
@author: m.sikarwar
"""

import typer
from typing_extensions import Annotated
import logging
import subprocess
from pathlib import Path
from . import __version__
from sci_wiz.invoker import Invoker
from sci_wiz.configure import Configure
from sci_wiz.data_preprocessor import DataPreprocessor


log = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] - [%(name)s:%(lineno)s] - %(levelname)s - %(message)s",
)

app = typer.Typer()


@app.callback()
def callback():
    """
    sci wiz CLI application
    """
    pass


@app.command()
def create_config():
    """Generates config file for the workflow in user should provide inputs and
    other configuration details. Usage: This commands needs to be run before
    running the workflow.
    """
    config = Configure()
    wizard = Invoker()
    wizard.register("configure", config)
    wizard.execute("configure")
    pass


@app.command()
def run_initial_qc(
    config: Annotated[
        str,
        typer.Option(help="User config(ini) path"),
    ] = Path("user_input.ini"),
    engine: Annotated[
        str,
        typer.Option(help="Container engine; Supports docker & singularity. Usage: docker or singularity"),
    ] = "singularity",
):
    """Run initial quality control (QC) for RNA-seq data using FastQC and MultiQC.

    Args:
        config (Annotated[str, typer.Option], optional): Path to the user configuration (ini) file. Defaults to "user_input.ini".
        engine (Annotated[str, typer.Option], optional): Container engine to use (docker or singularity). Defaults to "singularity".

    """
    initialQcFlag = True
    inputJson = Configure.load_config(config)
    inputJson["initial_qc"] = initialQcFlag
    dp = DataPreprocessor(
        inputJson,
        engine=engine,
        entryPoint="rawQc",
    )
    wizard = Invoker()
    wizard.register("initialQc", dp)
    wizard.execute("initialQc")
    pass


@app.command()
def run_preprocessing(
    config: Annotated[
        str,
        typer.Option(help="User config(.ini) path"),
    ] = Path("user_input.ini"),
    engine: Annotated[
        str,
        typer.Option(help="Container engine; Supports docker & singularity"),
    ] = "singularity",
):
    """Run data pre-processing workflow that uses nextflow to run multiple
    steps such as trimming, alignment, and counting. Usage: --config str: Path to config file
    that contains user inputs with .ini extension. Defaults to "user_input.ini"
    in current working directory if generated by specified command.
    """
    try:
        inputJson = Configure.load_config(config)
        # print(inputJson)
        dp = DataPreprocessor(
            inputJson,
            engine=engine,
        )
        wizard = Invoker()
        wizard.register("preprocess", dp)
        wizard.execute("preprocess")
    except Exception as e:
        log.exception(e)


@app.command()
def version():
    """
    Check sci wizard CLI application version
    """
    print(f"sci-wiz: {__version__}")


@app.command()
def check_nf_version():
    """
    Check nextflow version that sci wizard application is using.
    """
    command = "nextflow -v"
    submit_proc = subprocess.run(
        ["bash", "-c", command], capture_output=True, text=True
    )
    print(submit_proc.stdout)
